buildscript {
    apply from: 'deps.gradle'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2"
        }
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.androidplugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions.versionsplugin"
        classpath "com.jeppeman.locallydynamic.gradle:plugin:$versions.locallydynamic_gradle"
        classpath "digital.wup:android-maven-publish:$versions.publish"
    }
}

ext {
    minSdkVersion = 14
    targetSdkVersion = 29
    compileSdkVersion = 29
    buildToolsVersion = "29.0.5"
    androidVersionCode = 1
    androidVersionName = "1.0"
    sourceCompatibilityVersion = JavaVersion.VERSION_1_6
    targetCompatibilityVersion = JavaVersion.VERSION_1_6
    applicationIdBase = "com.example.locallydynamic"
    testApplicationId = "${applicationIdBase}.test"
    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    jvmTargetVersion = "1.6"
}

subprojects {
    afterEvaluate { project ->
        tasks.withType(Test) {
            testLogging {
                exceptionFormat "full"
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams true
                events = ["passed", "skipped", "failed", "standardOut", "standardError"]
            }
        }

        repositories {
            mavenLocal()
            jcenter()
            google()
            mavenCentral()
        }

        if (project.hasProperty('android')) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion

                def minSdk = project.android.defaultConfig.minSdkVersion
                defaultConfig {
                    minSdkVersion (minSdk != null ? minSdk.apiLevel : rootProject.ext.minSdkVersion)
                    targetSdkVersion rootProject.ext.targetSdkVersion
                    versionCode rootProject.ext.androidVersionCode
                    versionName rootProject.ext.androidVersionName
                }

                compileOptions {
                    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
                    targetCompatibility rootProject.ext.targetCompatibilityVersion
                }

                lintOptions {
                    abortOnError true
                }

                if (project.plugins.findPlugin("kotlin-android")
                        || project.plugins.findPlugin("kotlin")) {
                    kotlinOptions {
                        jvmTarget = rootProject.ext.jvmTargetVersion
                    }
                }

            }
        } else if (project.hasProperty('java')) {
            sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
            targetCompatibility = rootProject.ext.targetCompatibilityVersion

            if (project.plugins.findPlugin('kotlin')){
                compileKotlin {
                    kotlinOptions {
                        jvmTarget = rootProject.ext.jvmTargetVersion
                    }
                }
                compileTestKotlin {
                    kotlinOptions {
                        jvmTarget = rootProject.ext.jvmTargetVersion
                    }
                }
            }
        }
    }
}

apply plugin: "com.github.ben-manes.versions"

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
